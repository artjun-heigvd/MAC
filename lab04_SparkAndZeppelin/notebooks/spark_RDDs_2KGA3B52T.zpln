{
  "paragraphs": [
    {
      "text": "%md\n# Méthode d\u0027accès aux données\n## Labo: Spark\n\nAuteur: Christopher MEIER\n\nAutomne 2024",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:45.390",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 183.5,
              "optionOpen": false
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eMéthode d\u0026rsquo;accès aux données\u003c/h1\u003e\n\u003ch2\u003eLabo: Spark\u003c/h2\u003e\n\u003cp\u003eAuteur: Christopher MEIER\u003c/p\u003e\n\u003cp\u003eAutomne 2024\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_1543219498",
      "id": "20240513-092648_2102106332",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:31:45.428",
      "dateFinished": "2025-01-20 12:31:48.220",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Spark initialisation\n\nNothing to modify in this section.\n\nHere we create and configure the SparkSession and SparkContext.",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:48.231",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eSpark initialisation\u003c/h3\u003e\n\u003cp\u003eNothing to modify in this section.\u003c/p\u003e\n\u003cp\u003eHere we create and configure the SparkSession and SparkContext.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_916388571",
      "id": "20240513-092648_713056072",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:31:48.260",
      "dateFinished": "2025-01-20 12:31:48.281",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n// The spark session is automatically created by Zeppelin.\n// We import some often used functions\nimport org.apache.spark.sql._\nimport org.apache.spark.rdd._",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:53:36.962",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql._\nimport org.apache.spark.rdd._\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_1606895974",
      "id": "20240513-092648_753540709",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:53:36.985",
      "dateFinished": "2025-01-20 12:53:37.287",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Dataset loading\n\nNothing to modify in this section.",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:49.185",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eDataset loading\u003c/h3\u003e\n\u003cp\u003eNothing to modify in this section.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_2036325162",
      "id": "20240513-092648_1088362509",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:31:49.272",
      "dateFinished": "2025-01-20 12:31:49.304",
      "status": "FINISHED"
    },
    {
      "text": "%spark\ncase class Movie(id: Int, title: String, genres: Seq[String],\n                 description: String, director: String, actors: Seq[String],\n                 year: Int, rating: Float, votes: Int)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:53:38.669",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "class Movie\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_373013917",
      "id": "20240513-092648_1619176723",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:53:38.684",
      "dateFinished": "2025-01-20 12:53:39.104",
      "status": "FINISHED"
    },
    {
      "text": "%spark\ndef parseRow(row: Row): Movie \u003d {\n    val id \u003d row.getInt(0)\n    val title \u003d row.getString(1)\n    val genres \u003d row.getString(2).split(\",\").toList\n    val description \u003d row.getString(3)\n    val director \u003d row.getString(4)\n    val actors \u003d row.getString(5).split(\",\").toList\n    val year \u003d row.getInt(6)\n    val rating \u003d row.getDouble(8).toFloat\n    val votes \u003d row.getInt(9)\n\n    Movie(id, title, genres, description, director, actors, year, rating, votes)\n}",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:53:40.200",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "def parseRow(row: org.apache.spark.sql.Row): \u001b[1m\u001b[32mMovie\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_448363363",
      "id": "20240513-092648_876154503",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:53:40.213",
      "dateFinished": "2025-01-20 12:53:40.520",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval filename \u003d \"/repo/data/IMDB-Movie-Data.csv\"\nval moviesDF \u003d spark.read.format(\"csv\")\n    .option(\"sep\", \",\")\n    .option(\"inferSchema\", \"true\")\n    .option(\"header\", \"true\")\n    .load(filename)\nval rddMovies \u003d moviesDF.rdd.map(parseRow)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:53:41.778",
      "progress": 100,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "val \u001b[1m\u001b[34mfilename\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m \u003d /repo/data/IMDB-Movie-Data.csv\nval \u001b[1m\u001b[34mmoviesDF\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m \u003d [Rank: int, Title: string ... 10 more fields]\nval \u001b[1m\u001b[34mrddMovies\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[Movie]\u001b[0m \u003d MapPartitionsRDD[15] at map at \u003cconsole\u003e:8\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://a3ed83b0bc45:4040/jobs/job?id\u003d0"
            },
            {
              "jobUrl": "http://a3ed83b0bc45:4040/jobs/job?id\u003d1"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070361_1536119950",
      "id": "20240513-092648_218362564",
      "dateCreated": "2025-01-09 12:34:30.361",
      "dateStarted": "2025-01-20 12:53:41.792",
      "dateFinished": "2025-01-20 12:53:47.155",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n// Print the title of the first 10 movies to see if they were correctly added.\nrddMovies.take(10).map(m \u003d\u003e m.title).foreach(println)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:58.115",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Guardians of the Galaxy\nPrometheus\nSplit\nSing\nSuicide Squad\nThe Great Wall\nLa La Land\nMindhorn\nThe Lost City of Z\nPassengers\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_1876765793",
      "id": "20240513-092648_2138868674",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:31:58.213",
      "dateFinished": "2025-01-20 12:31:59.245",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Part 1 - Playing with the movies using RDD functions\n\nThe goal of this part is to play (i.e. query, filter and transform the data) with the movies.",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:59.342",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003ePart 1 - Playing with the movies using RDD functions\u003c/h3\u003e\n\u003cp\u003eThe goal of this part is to play (i.e. query, filter and transform the data) with the movies.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_481355544",
      "id": "20240513-092648_182672139",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:31:59.462",
      "dateFinished": "2025-01-20 12:31:59.504",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#### Ex1 - Print the movies whose title contains \"City\" \n\nGoal: \n\n* use `map()` and `filter()` methods to get the title of the movies that contains \"City\" in their title\n \nOutput example:\n\n```plain\nCity of Tiny Lights\nThe Mortal Instruments: City of Bones\n```\n\nSteps:\n\n* Use `filter()` to only keep the movies that contains \"City\" in their title\n* Use `map()` to retrieve the titles of these filtered movies\n* Use `foreach()` to pretty print the results",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:59.555",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEx1 - Print the movies whose title contains \u0026ldquo;City\u0026rdquo;\u003c/h4\u003e\n\u003cp\u003eGoal:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003euse \u003ccode\u003emap()\u003c/code\u003e and \u003ccode\u003efilter()\u003c/code\u003e methods to get the title of the movies that contains \u0026ldquo;City\u0026rdquo; in their title\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOutput example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003eCity of Tiny Lights\nThe Mortal Instruments: City of Bones\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSteps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efilter()\u003c/code\u003e to only keep the movies that contains \u0026ldquo;City\u0026rdquo; in their title\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003emap()\u003c/code\u003e to retrieve the titles of these filtered movies\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eforeach()\u003c/code\u003e to pretty print the results\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_1737029079",
      "id": "20240513-092648_143829024",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:31:59.586",
      "dateFinished": "2025-01-20 12:31:59.626",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nrddMovies.filter(m \u003d\u003e m.title.contains(\"City\")).map(m \u003d\u003e m.title).collect().foreach(println)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:31:59.685",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "The Lost City of Z\nSin City: A Dame to Kill For\nCity of Tiny Lights\nThe Mortal Instruments: City of Bones\nSex and the City\nSex and the City 2\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d3"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_997067873",
      "id": "20240513-092648_1913578715",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:31:59.719",
      "dateFinished": "2025-01-20 12:32:01.203",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#### Ex2 - Print the title of the movies rated between `rateMin` and `rateMax`. Take the 10 best ratings.\n\nGoal:\n    \n* Take the titles of the movies that were rated between `rateMin` and `rateMax` (excluding `rateMin` and including`rateMax`).\n* This list is sorted by rating DESC\n    \nOutput example:\n\n```plain\n...\n3.7 - The Last Face\n3.5 - Wrecker\n...\n```\n    \nSteps:\n\n* Use `filter()` to only keep the movies released between `rateMin` and `rateMax`\n* Sort the filtered movies by decreasing rating\n* Use `map()` to keep only the relevant attributes (i.e. rating and title)\n* Use `foreach()` to pretty print the results",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:32:01.230",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEx2 - Print the title of the movies rated between \u003ccode\u003erateMin\u003c/code\u003e and \u003ccode\u003erateMax\u003c/code\u003e. Take the 10 best ratings.\u003c/h4\u003e\n\u003cp\u003eGoal:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTake the titles of the movies that were rated between \u003ccode\u003erateMin\u003c/code\u003e and \u003ccode\u003erateMax\u003c/code\u003e (excluding \u003ccode\u003erateMin\u003c/code\u003e and including\u003ccode\u003erateMax\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003eThis list is sorted by rating DESC\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOutput example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003e...\n3.7 - The Last Face\n3.5 - Wrecker\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSteps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003efilter()\u003c/code\u003e to only keep the movies released between \u003ccode\u003erateMin\u003c/code\u003e and \u003ccode\u003erateMax\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSort the filtered movies by decreasing rating\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003emap()\u003c/code\u003e to keep only the relevant attributes (i.e. rating and title)\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eforeach()\u003c/code\u003e to pretty print the results\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_812196553",
      "id": "20240513-092648_847272060",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:32:01.369",
      "dateFinished": "2025-01-20 12:32:01.416",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nval rateMin \u003d 3\nval rateMax \u003d 4\n\nrddMovies\n.filter(m \u003d\u003e m.rating \u003e rateMin \u0026\u0026 m.rating \u003c\u003d rateMax)\n.sortBy(m \u003d\u003e m.rating, false)\n.map(m \u003d\u003e (m.rating, m.title))\n.collect()\n.foreach{ case (rating, title) \u003d\u003e println(s\"$rating - $title\") }",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:32:01.468",
      "progress": 100,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "4.0 - 2307: Winter\u0027s Dream\n3.9 - The Disappointments Room\n3.9 - The Black Room\n3.9 - Birth of the Dragon\n3.7 - The Last Face\n3.7 - Satanic\n3.5 - The Intent\n3.5 - Wrecker\n3.2 - Tall Men\nval \u001b[1m\u001b[34mrateMin\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m \u003d 3\nval \u001b[1m\u001b[34mrateMax\u001b[0m: \u001b[1m\u001b[32mInt\u001b[0m \u003d 4\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d4"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_921272710",
      "id": "20240513-092648_415273231",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:32:01.531",
      "dateFinished": "2025-01-20 12:32:03.547",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#### Ex3 - Print the 10 top genres\n\nGoals:\n\n* Print the list of the genres that appears the most\n* Use `flatMap()`\n\nOutput example:\n\n```plain\nDrama (513)\nAction (303)\nComedy (279)\nAdventure (259)\n```\n\nTheory:\n\nWhen an operation is giving you a sequence of sequences like:\n\n```scala\nArray(\"hello\", \"world\").map(word \u003d\u003e word.split(\"\"))\nres91: Array[Array[String]] \u003d Array(Array(h, e, l, l, o), Array(w, o, r, l, d))\n```\n\nYou may want to flatten this to only have a single list like:\n```scala\nArray(\"hello\", \"world\").map(_.split(\"\")).flatten\nres93: Array[String] \u003d Array(h, e, l, l, o, w, o, r, l, d)\n```\n\nYou can achieve the same result (i.e. `map` + `flatten`) using `flatMap`:\n```scala\nArray(\"hello\", \"world\").flatMap(_.split(\"\"))\nres95: Array[String] \u003d Array(h, e, l, l, o, w, o, r, l, d)\n```\n\nWe are going to apply this same technique with the `genres` member.\n\nSteps:\n\n* Use `flatMap()` to get the list with all the genres\n* Make sure to remove trailling whitespaces\n* Count the genres\n* Sort them by decreasing order\n* Show the top 10 genres",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:32:03.635",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEx3 - Print the 10 top genres\u003c/h4\u003e\n\u003cp\u003eGoals:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrint the list of the genres that appears the most\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003eflatMap()\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOutput example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003eDrama (513)\nAction (303)\nComedy (279)\nAdventure (259)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTheory:\u003c/p\u003e\n\u003cp\u003eWhen an operation is giving you a sequence of sequences like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-scala\"\u003eArray(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;).map(word \u003d\u0026gt; word.split(\u0026quot;\u0026quot;))\nres91: Array[Array[String]] \u003d Array(Array(h, e, l, l, o), Array(w, o, r, l, d))\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou may want to flatten this to only have a single list like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-scala\"\u003eArray(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;).map(_.split(\u0026quot;\u0026quot;)).flatten\nres93: Array[String] \u003d Array(h, e, l, l, o, w, o, r, l, d)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYou can achieve the same result (i.e. \u003ccode\u003emap\u003c/code\u003e + \u003ccode\u003eflatten\u003c/code\u003e) using \u003ccode\u003eflatMap\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-scala\"\u003eArray(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;).flatMap(_.split(\u0026quot;\u0026quot;))\nres95: Array[String] \u003d Array(h, e, l, l, o, w, o, r, l, d)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWe are going to apply this same technique with the \u003ccode\u003egenres\u003c/code\u003e member.\u003c/p\u003e\n\u003cp\u003eSteps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUse \u003ccode\u003eflatMap()\u003c/code\u003e to get the list with all the genres\u003c/li\u003e\n\u003cli\u003eMake sure to remove trailling whitespaces\u003c/li\u003e\n\u003cli\u003eCount the genres\u003c/li\u003e\n\u003cli\u003eSort them by decreasing order\u003c/li\u003e\n\u003cli\u003eShow the top 10 genres\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_1185059365",
      "id": "20240513-092648_1323552940",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:32:03.673",
      "dateFinished": "2025-01-20 12:32:03.719",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nrddMovies\n    .flatMap(m \u003d\u003e m.genres)\n    .map(m \u003d\u003e (m.trim(), 1))\n    .reduceByKey(_+_)\n    .sortBy(_._2, false)\n    .take(10)\n    .foreach(println)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:58:20.200",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(Drama,513)\n(Action,303)\n(Comedy,279)\n(Adventure,259)\n(Thriller,195)\n(Crime,150)\n(Romance,141)\n(Sci-Fi,120)\n(Horror,119)\n(Mystery,106)\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://a3ed83b0bc45:4040/jobs/job?id\u003d2"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_1279308360",
      "id": "20240513-092648_877853710",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:53:53.910",
      "dateFinished": "2025-01-20 12:53:55.119",
      "status": "FINISHED"
    },
    {
      "text": "%md\n#### Ex4 - Print the average number of votes per year, order by descreasing number of votes\n\nGoal:\n\n* Print the average votes per year\n* This output is sorted by descreasing votes\n\nOutput example:\n\n```plain\n...\nyear: 2008 average votes: 275505.3846153846\nyear: 2009 average votes: 255780.64705882352\nyear: 2010 average votes: 252782.31666666668\n...\n```\n\nTheory:\n\nWe are going to use `reduceByKey()` which has the following signature `reduceByKey(func: (V, V) \u003d\u003e V): RDD[(K, V)]`. \n\n`reduceByKey()` works on a RDD like `RDD[(K,V)]` (i.e. sort of \"list of key/values pairs\"). \n\n`reduceByKey()` takes a function that, from two elements, returns one i.e. the `func: (V, V) \u003d\u003e V` in the signature.\nThe difference with `reduce()` is that `reduceByKey()` uses two elements sharing the same key.\n\nFor example (pseudo code):\n\n```plain\n year, count\n(2010, 2)\n(2011, 3)\n(2011, 4)\n(2010, 8)\n// use reduceByKey((count1, count2) \u003d\u003e count1+count2)\n\u003e (2010, 10)\n\u003e (2011, 7)\n```\n\nNote: here `count` is just an Int but it can be anything e.g. `Movie`\n\nSteps:\n\n* To compute the average we need the **total sum** of votes per year and the **count** of all the movies per year\n* Use `map()` to create an RDD made of `(year, (votes, 1))`. Like a word count we use the `1` to be able to count the number of movies per year\n* Use `reduceByKey()` to sum the votes and to count the number of movies per year. The output should look like: `(year, (totalVotes, moviePerYearCount))`\n* Find a way to compute the average using the result from the last operation\n* Sort by number of votes decreasing",
      "user": "anonymous",
      "dateUpdated": "2025-01-09 14:04:27.708",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch4\u003eEx4 - Print the average number of votes per year, order by descreasing number of votes\u003c/h4\u003e\n\u003cp\u003eGoal:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrint the average votes per year\u003c/li\u003e\n\u003cli\u003eThis output is sorted by descreasing votes\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOutput example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003e...\nyear: 2008 average votes: 275505.3846153846\nyear: 2009 average votes: 255780.64705882352\nyear: 2010 average votes: 252782.31666666668\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eTheory:\u003c/p\u003e\n\u003cp\u003eWe are going to use \u003ccode\u003ereduceByKey()\u003c/code\u003e which has the following signature \u003ccode\u003ereduceByKey(func: (V, V) \u003d\u0026gt; V): RDD[(K, V)]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereduceByKey()\u003c/code\u003e works on a RDD like \u003ccode\u003eRDD[(K,V)]\u003c/code\u003e (i.e. sort of \u0026ldquo;list of key/values pairs\u0026rdquo;).\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003ereduceByKey()\u003c/code\u003e takes a function that, from two elements, returns one i.e. the \u003ccode\u003efunc: (V, V) \u003d\u0026gt; V\u003c/code\u003e in the signature.\u003cbr /\u003e\nThe difference with \u003ccode\u003ereduce()\u003c/code\u003e is that \u003ccode\u003ereduceByKey()\u003c/code\u003e uses two elements sharing the same key.\u003c/p\u003e\n\u003cp\u003eFor example (pseudo code):\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003e year, count\n(2010, 2)\n(2011, 3)\n(2011, 4)\n(2010, 8)\n// use reduceByKey((count1, count2) \u003d\u0026gt; count1+count2)\n\u0026gt; (2010, 10)\n\u0026gt; (2011, 7)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eNote: here \u003ccode\u003ecount\u003c/code\u003e is just an Int but it can be anything e.g. \u003ccode\u003eMovie\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eSteps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo compute the average we need the \u003cstrong\u003etotal sum\u003c/strong\u003e of votes per year and the \u003cstrong\u003ecount\u003c/strong\u003e of all the movies per year\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003emap()\u003c/code\u003e to create an RDD made of \u003ccode\u003e(year, (votes, 1))\u003c/code\u003e. Like a word count we use the \u003ccode\u003e1\u003c/code\u003e to be able to count the number of movies per year\u003c/li\u003e\n\u003cli\u003eUse \u003ccode\u003ereduceByKey()\u003c/code\u003e to sum the votes and to count the number of movies per year. The output should look like: \u003ccode\u003e(year, (totalVotes, moviePerYearCount))\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eFind a way to compute the average using the result from the last operation\u003c/li\u003e\n\u003cli\u003eSort by number of votes decreasing\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_1619060920",
      "id": "20240513-092648_1078439886",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-09 14:04:28.220",
      "dateFinished": "2025-01-09 14:04:28.224",
      "status": "FINISHED"
    },
    {
      "text": "%spark\nrddMovies\n    .map(m \u003d\u003e (m.year, (m.votes.toDouble, 1)))\n    .reduceByKey((m, n) \u003d\u003e (m._1 + n._1, m._2 + n._2))\n    .map{case (year, (totalVotes, moviePerYearCount)) \u003d\u003e (year, totalVotes/moviePerYearCount)}\n    .sortBy(m \u003d\u003e m._2, false)\n    .collect()\n    .foreach{case (year, avg) \u003d\u003e println(s\"year: $year average votes: $avg\")}",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:58:38.524",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "year: 2012 average votes: 285226.09375\nyear: 2008 average votes: 275505.3846153846\nyear: 2006 average votes: 269289.95454545453\nyear: 2009 average votes: 255780.64705882352\nyear: 2010 average votes: 252782.31666666668\nyear: 2007 average votes: 244331.03773584907\nyear: 2011 average votes: 240790.3015873016\nyear: 2013 average votes: 219049.64835164836\nyear: 2014 average votes: 203930.22448979592\nyear: 2015 average votes: 115726.22047244094\nyear: 2016 average votes: 48591.75420875421\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d5"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_2002487420",
      "id": "20240513-092648_1308721736",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-20 12:33:19.246",
      "dateFinished": "2025-01-20 12:33:20.730",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Part 2 - Create a basic Inverted Index\n\nThe goal of this part is to show you how to create an inverted index that indexes words from all the movies\u0027 description.",
      "user": "anonymous",
      "dateUpdated": "2025-01-09 14:04:27.731",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003ePart 2 - Create a basic Inverted Index\u003c/h3\u003e\n\u003cp\u003eThe goal of this part is to show you how to create an inverted index that indexes words from all the movies\u0026rsquo; description.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_635018623",
      "id": "20240513-092648_362503434",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-09 14:04:28.320",
      "dateFinished": "2025-01-09 14:04:28.323",
      "status": "FINISHED"
    },
    {
      "text": "%md\nGoal:\n\nUsing `rddMovies` create an inverted that use the movies\u0027 description:\n\n```plain\nMovie(1,Guardians of the Galaxy,List(Action, Adventure, Sci-Fi),A group of intergalactic [...] of the universe.,James Gunn,List(Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana),2014,8.1,757074.0)\nMovie(2,Prometheus,List(Adventure, Mystery, Sci-Fi),Following clues to the origin[...] not alone.,Ridley Scott,List(Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron),2012,7.0,485820.0)\nMovie(3,Split,List(Horror, Thriller),Three girls are kidnapped [...] a frightful new 24th.,M. Night Shyamalan,List(James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula),2016,7.3,157606.0)\n...\n```\n\nand extract them to produce an inverted index like:\n\n```plain\n\"reunion\" -\u003e (640, 697)\n\"runner\" -\u003e (338)\n\"vietnam\" -\u003e (797, 947, 983)\n...\n```\n\nSteps\n\n* Tokenize description i.e. produce an RDD like (movieId, words)\n* Normalize words e.g. toLowercase, trimming,..\n* Remove stopwords (ignored here)\n* Apply stemming (ignored here)\n* Group by document id",
      "user": "anonymous",
      "dateUpdated": "2025-01-09 14:04:27.745",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eGoal:\u003c/p\u003e\n\u003cp\u003eUsing \u003ccode\u003erddMovies\u003c/code\u003e create an inverted that use the movies\u0026rsquo; description:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003eMovie(1,Guardians of the Galaxy,List(Action, Adventure, Sci-Fi),A group of intergalactic [...] of the universe.,James Gunn,List(Chris Pratt, Vin Diesel, Bradley Cooper, Zoe Saldana),2014,8.1,757074.0)\nMovie(2,Prometheus,List(Adventure, Mystery, Sci-Fi),Following clues to the origin[...] not alone.,Ridley Scott,List(Noomi Rapace, Logan Marshall-Green, Michael Fassbender, Charlize Theron),2012,7.0,485820.0)\nMovie(3,Split,List(Horror, Thriller),Three girls are kidnapped [...] a frightful new 24th.,M. Night Shyamalan,List(James McAvoy, Anya Taylor-Joy, Haley Lu Richardson, Jessica Sula),2016,7.3,157606.0)\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand extract them to produce an inverted index like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"language-plain\"\u003e\u0026quot;reunion\u0026quot; -\u0026gt; (640, 697)\n\u0026quot;runner\u0026quot; -\u0026gt; (338)\n\u0026quot;vietnam\u0026quot; -\u0026gt; (797, 947, 983)\n...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSteps\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTokenize description i.e. produce an RDD like (movieId, words)\u003c/li\u003e\n\u003cli\u003eNormalize words e.g. toLowercase, trimming,..\u003c/li\u003e\n\u003cli\u003eRemove stopwords (ignored here)\u003c/li\u003e\n\u003cli\u003eApply stemming (ignored here)\u003c/li\u003e\n\u003cli\u003eGroup by document id\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070362_2042325395",
      "id": "20240513-092648_1212054958",
      "dateCreated": "2025-01-09 12:34:30.362",
      "dateStarted": "2025-01-09 14:04:28.420",
      "dateFinished": "2025-01-09 14:04:28.424",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n/**\n* Goal: create an inverted index that allows searching a word in the movies description.\n* \n* Features:\n* - case insensitive\n*\n*/\n// TODO student\n// In this first function we are going to tokenize and order the descriptions of the movies, then return these data. We are not going to apply any search right now.\ndef createInvertedIndex(movies: RDD[Movie]): RDD[(String, Iterable[Int])] \u003d {\n    // Define helper functions directly inside this function. In scala you can declare inner functions\n    // and use them only inside the function they were declared. Useful to encapsulate/restrict \n    // their use outside this function.\n    \n    // Split the given string into an array of words (without any formatting), then return it.\n    def tokenizeDescription(description: String): Seq[String] \u003d {\n        description.split(\" \")\n    }\n    \n    // Remove the outer blank spaces (trim) in the given word, transform it in lowercase, then return it.\n    def normalizeWord(word: String): String \u003d {\n        word.trim().toLowerCase\n    }\n    \n    // For the sake of simplicity let\u0027s ignore the implementation (in a real case we would return true if w is a stopword, otherwise false).\n    // TODO student nothing here but still call this function in your invertedIndex creation process.\n    def isStopWord(w: String): Boolean \u003d {\n        false\n    }\n    \n    // For the sake of simplicity let\u0027s ignore the implementation (in a real case we would apply stemming to w and return the result, e.g. w\u003dautomation -\u003e w\u003dautomat).\n    // TODO student nothing here but still call this function in your invertedIndex creation process.\n    def applyStemming(w: String): String \u003d {\n        w\n    }\n    \n    // TODO student\n    // Here we are going to work on the movies RDD, by tokenizing and normalizing the description of every movie, then by building a key-value object that contains the tokens as keys, and the IDs of the movies as values\n    // (see the example on 4).\n    // The goal here is to do everything by chaining the possible transformations and actions of Spark.\n    // Possible steps:\n    //   1) What we first want to do here is applying the 4 previous methods on any movie\u0027s description. Be aware of the fact that we also want to keep the IDs of the movies.\n    //   2) For each tokenized word, create a tuple as (word, id), where id is the current movie id\n    //        [\n    //          (\"toto\", 120), (\"mange\", 120), (\"des\", 120), (\"pommes\", 120),\n    //          (\"toto\", 121), (\"lance\", 121), (\"des\", 121), (\"photocopies\", 121)\n    //        ]\n    //      Hint: you can use a `map` function inside another `map` function.\n    //   3) We finally need to find a way to remove duplicated keys and thus only having one entry per key, with all the linked IDs as values. For example:\n    //        [\n    //          (\"toto\", [120, 121]),\n    //          (\"mange\", [120]),\n    //          ...\n    //        ]\n    val invertedIndex \u003d movies\n                            .flatMap(m \u003d\u003e tokenizeDescription(m.description)\n                                .map(s \u003d\u003e applyStemming(normalizeWord(s)))\n                                .filter(f \u003d\u003e !isStopWord(f))\n                                .map(word \u003d\u003e (word, m.id)))\n                            .groupByKey()\n                            .mapValues(ids \u003d\u003e ids.toSet: Iterable[Int])\n\n    // Return the new-built inverted index.\n    invertedIndex\n}",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:44:54.917",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[33mwarning: \u001b[0m1 deprecation (since 2.13.0); for details, enable `:setting -deprecation` or `:replay -deprecation`\ndef createInvertedIndex(movies: org.apache.spark.rdd.RDD[Movie]): \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Iterable[Int])]\u001b[0m\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070363_646709284",
      "id": "20240513-092648_1408148244",
      "dateCreated": "2025-01-09 12:34:30.363",
      "dateStarted": "2025-01-20 12:44:54.960",
      "dateFinished": "2025-01-20 12:44:55.468",
      "status": "FINISHED"
    },
    {
      "text": "%md\nNow we would like to use our inverted index to display the top N most used words in the descriptions of movies.",
      "user": "anonymous",
      "dateUpdated": "2025-01-09 14:04:27.769",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "colWidth": 12.0,
        "editorHide": true,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eNow we would like to use our inverted index to display the top N most used words in the descriptions of movies.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070363_593256672",
      "id": "20240513-092648_1571732340",
      "dateCreated": "2025-01-09 12:34:30.363",
      "dateStarted": "2025-01-09 14:04:28.520",
      "dateFinished": "2025-01-09 14:04:28.530",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n// TODO student\n// Here we are going to operate the analytic and display its result on a given inverted index (that will be obtained from the previous function).\ndef topN(invertedIndex: RDD[(String, Iterable[Int])], N: Int): Unit \u003d {\n  // TODO student\n  // We are going to work on the given invertedIndex array to do our analytic:\n  //   1) Find a way to get the number of movie in which a word appears.\n  //   2) Keep only the top N words and their occurence.\n  val topWords: Array[(String, Int)] \u003d invertedIndex\n                                        .map{case (word, indexes) \u003d\u003e (word, indexes.size)}\n                                        .sortBy(m \u003d\u003e m._2, false)\n                                        .take(N)\n  \n  // Print the words and the number of descriptions in which they appear.\n  println(\"Top \u0027\" + N + \"\u0027 most used words\")\n  topWords.foreach(println)\n}",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:56:53.071",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "       def topN(invertedIndex: RDD[(String, Iterable[Int])], N: Int): Unit \u003d {\n                               ^\nOn line 4: \u001b[31merror: \u001b[0mnot found: type RDD\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070363_1454244877",
      "id": "20240513-092648_800469110",
      "dateCreated": "2025-01-09 12:34:30.363",
      "dateStarted": "2025-01-20 12:56:53.122",
      "dateFinished": "2025-01-20 12:57:16.575",
      "status": "ERROR"
    },
    {
      "text": "%spark\n// Code used to test your implementation.\n// Create the inverted index of the movies.\nval invertedIndex \u003d createInvertedIndex(rddMovies)\n\n// Show how the inverted index looks like.\ninvertedIndex.take(3).foreach(x \u003d\u003e println(x._1 + \": \" + x._2.mkString(\", \")))\n\n// Show the top 10 most used words.\ntopN(invertedIndex, 10)",
      "user": "anonymous",
      "dateUpdated": "2025-01-20 12:46:32.619",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0,
        "editorHide": false,
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "avatars,: 582\ndivorcee: 63\npark,: 86\nTop \u002710\u0027 most used words\n(a,834)\n(the,720)\n(to,628)\n(of,558)\n(and,552)\n(in,458)\n(his,326)\n(an,259)\n(is,255)\n(with,243)\nval \u001b[1m\u001b[34minvertedIndex\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.rdd.RDD[(String, Iterable[Int])]\u001b[0m \u003d MapPartitionsRDD[51] at mapValues at \u003cconsole\u003e:62\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d12"
            },
            {
              "jobUrl": "http://4bb92882656c:4040/jobs/job?id\u003d13"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070363_2024165579",
      "id": "20240513-092648_1232697535",
      "dateCreated": "2025-01-09 12:34:30.363",
      "dateStarted": "2025-01-20 12:46:32.658",
      "dateFinished": "2025-01-20 12:46:33.935",
      "status": "FINISHED"
    },
    {
      "text": "%spark\n",
      "user": "anonymous",
      "dateUpdated": "2025-01-09 14:04:27.795",
      "progress": 0,
      "config": {
        "lineNumbers": true,
        "tableHide": false,
        "editorSetting": {
          "language": "plain_text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/plain_text",
        "colWidth": 12.0,
        "fontSize": 9.0,
        "editorHide": false,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1736426070363_1921050424",
      "id": "paragraph_1716290266344_470791481",
      "dateCreated": "2025-01-09 12:34:30.363",
      "dateStarted": "2025-01-09 13:42:25.134",
      "dateFinished": "2025-01-09 13:42:25.137",
      "status": "ERROR"
    }
  ],
  "name": "spark_RDDs",
  "id": "2KGA3B52T",
  "defaultInterpreterGroup": "spark",
  "version": "0.11.2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}